<ahss-config>

  <!-- ****************************** -->
  <!-- Experiment-specific parameters -->
  <!-- ****************************** -->
  <framework>

    <!-- How long a clock tick lasts (in milliseconds) -->
    <clocktick>100</clocktick>

    <!-- Maximum simulation clock ticks -->
    <maxclock>10000</maxclock>

    <!-- Colon separated list of directories where controllers libraries are compiled -->
    <controller_path>$AHSSINSTALLDIR/user/vtrianni/simulation_build/controllers/sample_sbot_controller/.libs</controller_path>

  </framework>



  <!-- ****************************** -->
  <!-- Controller-specific parameters -->
  <!-- ****************************** -->
  <controllers>
    
    <sample_sbot_controller id="nn" library="sample_sbot_controller">
      <actuators>
	<sbot_wheels>
	  <implementation>3d_dynamics_sbot_wheels</implementation>
	</sbot_wheels>

	<sbot_leds>
	  <implementation>generic_sbot_leds</implementation>
	</sbot_leds>

	<sbot_turret>
	  <implementation>3d_dynamics_sbot_turret</implementation>
	</sbot_turret>

        <sbot_gripper>
	  <implementation>3d_dynamics_sbot_sticky_gripper</implementation>
	</sbot_gripper>
      </actuators>


      <sensors>
	<sbot_traction>
	  <implementation>generic_sbot_traction</implementation>
          <encoding>chassis-rotation</encoding>
          <noise>0</noise>
          <sensor_min>0</sensor_min>
          <sensor_max>3</sensor_max>
	</sbot_traction>

	<pie_camera>
	  <implementation>generic_pie_camera</implementation>
          <num_sectors>4</num_sectors>
          <sector_start>0</sector_start>
          <merge>true</merge>
          <colors>
            <color id="yellow" range="0.8" noise="0">on</color>
          </colors>
          <noise>0</noise>
          <sensor_min>0</sensor_min>
          <sensor_max>0.8</sensor_max>
          <invert_distance_readings>true</invert_distance_readings>
	</pie_camera>

	<sbot_turret_rotation>
	  <implementation>generic_sbot_turret_rotation</implementation>
          <encoding>raw</encoding>
	</sbot_turret_rotation>

	<sbot_gripper>
	  <implementation>3d_dynamics_sbot_gripper</implementation>
          <error_in_gripper>0.01</error_in_gripper>
          <noise>0</noise>
	</sbot_gripper>
      </sensors>

    </sample_sbot_controller>
  </controllers>


  <!-- ****************************** -->
  <!-- loop functions                 -->
  <!-- ****************************** -->	
  <loop_functions>
    <library_path>$AHSSINSTALLDIR/user/vtrianni/simulation_build/experiments/coordinated_motion/.libs/</library_path>     
    <library_name>coordinated_motion</library_name>
    <sample_number>1</sample_number>
  </loop_functions>


  <!-- ******************* -->
  <!-- Arena configuration -->
  <!-- ******************* -->
  <!-- The arena is a cube whose width, height and depth are expressed in attribute "size": x,y,z (in meters) // you have to choose between 2D and 3D optimization.-->
  <arena size="10, 10, 3" optimization="3D" >
    <sbot id="fb1">
      <position>-0.2295, 0, 0</position>
      <orientation>0, 0, 0</orientation>
      <chassis_rotation>-90</chassis_rotation>
      <gripper_aperture>1</gripper_aperture>
      <mass>1</mass>
      <controller>nn</controller>
    </sbot>
    <sbot id="fb2">
      <position>-0.0765, 0, 0</position>
      <orientation>0, 0, 0</orientation>
      <chassis_rotation>90</chassis_rotation>
      <gripper_aperture>1</gripper_aperture>
      <mass>1</mass>
      <controller>nn</controller>
    </sbot>
    <sbot id="fb3">
      <position>0.0765, 0, 0</position>
      <orientation>0, 0, 0</orientation>
      <chassis_rotation>90</chassis_rotation>
      <gripper_aperture>1</gripper_aperture>
      <mass>1</mass>
      <controller>nn</controller>
    </sbot>
    <sbot id="fb4">
      <position>0.2295, 0, 0</position>
      <orientation>0, 0, 0</orientation>
      <chassis_rotation>90</chassis_rotation>
      <gripper_aperture>1</gripper_aperture>
      <mass>1</mass>
      <controller>nn</controller>
    </sbot>

    <plane id="ground">
      <position>0, 0, 0</position>
      <orientation>0, 0, 0</orientation>
    </plane>

  </arena>



  <!-- **************************************************************** -->
  <!-- Describe the physics engines that dictate movement and collision -->
  <!-- **************************************************************** -->
  <engines>

    <dynamics3d_engine id="ground">
      <!-- How many times this physics engine should be called for each simulation clock tick. -->
	<subclock>10</subclock>
	<gravity>0,0,-9.81</gravity>

	<!-- contact parameters -->
	<contacts>
          <contact id="c1">
            <material_1>sbot-wheel</material_1>
            <material_2>plane</material_2>
            <mode>default</mode>
            <mu>1,1</mu>
          </contact>
        </contacts>

    </dynamics3d_engine>

  </engines>
  
  <!-- ******************************************** -->
  <!-- Mapping between physics engines and entities -->
  <!-- ******************************************** -->
  <arena_physics>

    <!-- The ground physics engine contains the two sbots -->
    <engine id="ground">
      <entity id="fb1" />
      <entity id="fb2" />
      <entity id="fb3" />
      <entity id="fb4" />
      <entity id="ground" />
    </engine>

  </arena_physics>



  <!-- ********************************* -->
  <!-- Visualisation-specific parameters -->
  <!-- ********************************* -->
  <visualisations>

    <opengl_render id="mainwindow">
      <window_size>1024, 768</window_size>
      <window_title>Self Assembly Experiment</window_title>
      <camera_view_XYZ_0>0, -1.0, 1.0</camera_view_XYZ_0>
      <camera_view_HPR_0>90, -45, 0</camera_view_HPR_0>
      <use_textures>true</use_textures>
      <use_shadows>false</use_shadows>
      <start_paused>true</start_paused>
      <write_frames>false</write_frames>
      <frame_directory>movies/coordinated_motion</frame_directory>
      <frame_filename>frame_</frame_filename>
    </opengl_render >

  </visualisations>

</ahss-config>
